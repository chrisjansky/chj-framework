$color-attributes: (
  (
    name: border,
    property: border-color
  ), (
    name: background,
    property: background-color
  ), (
    name: color,
    property: color
  )
);

@each $attribute in $color-attributes {

  $attribute-name: map-get($attribute, "name");
  $attribute-property: map-get($attribute, "property");
  
  /* Attribute: #{$attribute-name} */

  $color-groups: map-get($json, "colors");

  // Count how many color groups are there
  @if (type-of($color-groups) == "list") {
    @each $color-group in $color-groups {

      $index: index($color-groups, $color-group);

      $color-name: map-get($color-group, "name");
      $color-shades: map-get($color-group, "shades");

      /* Color group: #{$color-name} */

      // Check the number of shades and react accordingly
      @if (type-of($color-shades) == "list") {
        @each $color-shade in $color-shades {
          $shade-name: map-get($color-shade, "name");
          $shade-value: map-get($color-shade, "value");

          .#{$attribute-name}-#{$index}--#{$shade-name} {
            @if ($shade-value == "transparent") {
              visibility: hidden;
            } @else {
              #{$attribute-property}: $shade-value;
            }
          }
        }
      } @else {
        // Skip the @each loop if only one shade present
        $shade-name: map-get($color-shades, "name");
        $shade-value: map-get($color-shades, "value");

        .#{$attribute-name}-#{$index}--#{$shade-name} {
          #{$attribute-property}: $shade-value;
        }
      }
    }
  } @else {
    // Skip the @each loop if only one color group present
    $color-name: map-get($color-groups, "name");
    $color-shades: map-get($color-groups, "shades");

    /* Color group: #{$color-name} */

    // Check the number of shades and react accordingly
    @if (type-of($color-shades) == "list") {
      @each $color-shade in $color-shades {
        $shade-name: map-get($color-shade, "name");
        $shade-value: map-get($color-shade, "value");

        .#{$attribute-name}-1--#{$shade-name} {
          @if ($shade-value == "transparent") {
            visibility: hidden;
          } @else {
            #{$attribute-property}: $shade-value;
          }
        }
      }
    } @else {
      $shade-name: map-get($color-shades, "name");
      $shade-value: map-get($color-shades, "value");

      .#{$attribute-name}-1--#{$shade-name} {
        #{$attribute-property}: $shade-value;
      }
    }
  }

  $greys: map-get($json, "greys");

  /* Greys */
  @each $grey in $greys {
    $grey--name: map-get($grey, "name");
    $grey--value: map-get($grey, "value");

    .#{$attribute-name}-grey--#{$grey--name} {
      #{$attribute-property}: $grey--value;
    }
  }

}
